{
  "blogs": [
    {
      "id": 3,
      "title": "Salut les pros",
      "author": "Tony",
      "body": "Ceci cest notre body....",
      "date": "2021-03-11 18:38:05.977Z"
    },
    {
      "title": "Comment utiliser Axios avec React",
      "author": "Alpha",
      "body": "Introduction\nDe nombreux projets sur le web doivent s’interfacer avec une API REST à un certain stade de leur développement. Axios est un client HTTP léger basé sur le service $http dans Angular.js v1.x et est similaire à l’API native JavaScript Fetch.\n\nAxios est basé sur Promise, ce qui vous permet de profiter des avantages d’async de JavaScript et await pour un code asynchrone plus lisible.\n\nVous pouvez également intercepter et annuler des demandes, et il existe une protection intégrée côté client contre la falsification des demandes intersites.\n\nDans cet article, vous explorerez des exemples d’utilisation d’Axios pour accéder à la populaire API JSON Placeholder au sein d’une application React.\n\nConditions préalables\nPour suivre cet article, vous aurez besoin de ce qui suit :\n\nNode.js version 10.16.0 installé sur votre ordinateur. Pour l’installer sur macOS ou Ubuntu 18.04, suivez les étapes du tutoriel Comment installer Node.js et créer un environnement de développement local sur macOS ou la section **Installation à l’aide d’un PPA **du tutoriel Comment installer Node.js sur Ubuntu 18.04.\nUn nouveau projet React mis en place avec Créez l’application React en suivant le tutoriel Comment mettre en place un projet React avec Create React App.\nIl sera également utile d’avoir une compréhension de base de JavaScript, que vous pouvez trouver dans les séries Comment coder en JavaScript, ainsi qu’une connaissance de base de HTML et CSS.\nÉtape 1 — Ajouter Axios au projet\nDans cette section, vous ajouterez Axios au projet React digital-ocean-tutorial que vous avez créé en suivant le tutoriel Comment mettre en place un projet React avec Create React App.\n\nPour ajouter Axios au projet, ouvrez votre terminal et changez de répertoire dans votre projet :\n\ncd digital-ocean-tutorial\nExécutez ensuite cette commande pour installer Axios :\n\nnpm install axios\nEnsuite, vous devrez importer Axios dans le fichier dans lequel vous voulez l’utiliser.\n\nÉtape 2 — Faire une requête GET\nDans cet exemple, vous créez un nouveau composant et vous y importez Axios pour envoyer une demande GET.\n\nDans le dossier src de votre projet React, créez un nouveau composant nommé PersonList.js :\n\nnano src/PersonList.js\nAjoutez le code suivant au composant :\n\ndigital-ocean-tutorial/src/PersonList.js\nimport React from 'react';\n\nimport axios from 'axios';\n\nexport default class PersonList extends React.Component {\n  state = {\n    persons: []\n  }\n\n  componentDidMount() {\n    axios.get(`https://jsonplaceholder.typicode.com/users`)\n      .then(res => {\n        const persons = res.data;\n        this.setState({ persons });\n      })\n  }\n\n  render() {\n    return (\n      <ul>\n        { this.state.persons.map(person => <li>{person.name}</li>)}\n      </ul>\n    )\n  }\n}\nTout d’abord, vous importez React et Axios afin que les deux puissent être utilisés dans le composant. Ensuite, vous vous branchez sur le componentDidMount lifecycle hook et effectuez une demande GET.\n\nVous utilisez axios.get(url) avec une URL provenant d’un point final de l’API pour obtenir une promesse qui renvoie un objet de réponse. À l’intérieur de l’objet de réponse, il y a des données auxquelles on attribue la valeur person.\n\nVous pouvez également obtenir d’autres informations sur la demande, telles que le code de statut sous res.status ou plus d’informations à l’intérieur de res.request.\n\nÉtape 3 — Faire une demande POST\nDans cette étape, vous utiliserez Axios avec une autre méthode de requête HTTP appelée POST.\n\nSupprimer le code précédent dans PersonList et ajoutez les éléments suivants pour créer un formulaire qui permet à l’utilisateur d’entrer des données et ensuite POSTer le contenu à une API :\n\ndigital-ocean-tutorial/src/PersonList.js\n\nimport React from 'react';\nimport axios from 'axios';\n\nexport default class PersonList extends React.Component {\n  state = {\n    name: '',\n  }\n\n  handleChange = event => {\n    this.setState({ name: event.target.value });\n  }\n\n  handleSubmit = event => {\n    event.preventDefault();\n\n    const user = {\n      name: this.state.name\n    };\n\n    axios.post(`https://jsonplaceholder.typicode.com/users`, { user })\n      .then(res => {\n        console.log(res);\n        console.log(res.data);\n      })\n  }\n\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <label>\n            Person Name:\n            <input type=\"text\" name=\"name\" onChange={this.handleChange} />\n          </label>\n          <button type=\"submit\">Add</button>\n        </form>\n      </div>\n    )\n  }\n}\nDans la fonction handleSubmit, vous empêchez l’action par défaut du formulaire. Ensuite, vous mettez à jour l'état en entrée de l'utilisateur.\n\nUtiliser POST vous donne le même objet de réponse avec des informations que vous pouvez utiliser dans un appel then.\n\nPour compléter la demande POST, vous devez d’abord saisir l’entrée de l'utilisateur. Ensuite, vous ajoutez les données en même temps que la demande POST, qui vous donnera une réponse. Vous pouvez alors utiliser console.log pour la réponse, qui devrait montrer l’entrée user dans le formulaire.\n\nÉtape 4 — Faire une demande DELETE\nDans cet exemple, vous verrez comment supprimer des éléments d’une API en utilisant axios.delete et en passant une URL comme paramètre.\n\nChangez le code du formulaire de l’exemple POST pour supprimer un utilisateur au lieu d’en ajouter un nouveau :\n\ndigital-ocean-tutorial/src/PersonList.js\n\nimport React from 'react';\nimport axios from 'axios';\n\nexport default class PersonList extends React.Component {\n  state = {\n    id: '',\n  }\n\n  handleChange = event => {\n    this.setState({ id: event.target.value });\n  }\n\n  handleSubmit = event => {\n    event.preventDefault();\n\n    axios.delete(`https://jsonplaceholder.typicode.com/users/${this.state.id}`)\n      .then(res => {\n        console.log(res);\n        console.log(res.data);\n      })\n  }\n\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <label>\n            Person ID:\n            <input type=\"text\" name=\"id\" onChange={this.handleChange} />\n          </label>\n          <button type=\"submit\">Delete</button>\n        </form>\n      </div>\n    )\n  }\n}\nLà encore, l’objet res vous fournit des informations sur la demande. Vous pouvez ensuite réintroduire ces informations dans le fichier console.log après l’envoi du formulaire.\n\nÉtape 5 — Utiliser une instance de base dans Axios\nDans cet exemple, vous verrez comment vous pouvez mettre en place une instance de base dans laquelle vous pouvez définir une URL et tout autre élément de configuration.\n\nCréez un fichier séparé nommé api.js:\n\nnano src/api.js\nExportez une nouvelle instance axios avec ces valeurs par défaut :\n\ndigital-ocean-tutorial/src/api.js\nimport axios from 'axios';\n\nexport default axios.create({\n  baseURL: `http://jsonplaceholder.typicode.com/`\n});\nUne fois que l’instance par défaut est configurée, elle peut être utilisée dans le composant PersonList. Vous importez la nouvelle instance comme ceci :\n\ndigital-ocean-tutorial/src/PersonList.js\nimport React from 'react';\nimport axios from 'axios';\n\nimport API from '../api';\n\nexport default class PersonList extends React.Component {\n  handleSubmit = event => {\n    event.preventDefault();\n\n    API.delete(`users/${this.state.id}`)\n      .then(res => {\n        console.log(res);\n        console.log(res.data);\n      })\n  }\n}\nParce que http://jsonplaceholder.typicode.com/ est maintenant l’URL de base, vous n’avez plus besoin de taper l’URL complète chaque fois que vous voulez atteindre un point d’extrémité différent sur l’API.\n\nÉtape 6 — Utilisation de async et de await\nDans cet exemple, vous verrez comment vous pouvez utiliser async et await pour travailler avec des Promises.\n\nLe mot-clé await résout la Promise et renvoie la value. La value peut alors être attribuée à une variable.\n\nhandleSubmit = async event => {\n  event.preventDefault();\n\n  //\n  const response = await API.delete(`users/${this.state.id}`);\n\n  console.log(response);\n  console.log(response.data);\n};\nDans cet exemple de code, le .then() est remplacé. La Promise est résolue, et la value est stockée dans la variable de response.\n\nConclusion\nDans ce tutoriel, vous avez exploré plusieurs exemples sur la façon d’utiliser Axios dans une application React pour créer des requêtes HTTP et gérer les réponses.\n\nSi vous souhaitez en savoir plus sur le programme React, consultez la série Comment coder dans React.js ou consultez la page thématique de React pour plus d’exercices et de projets de programmation.",
      "date": "2022-03-01 23:05:20.940Z",
      "id": 4
    },
    {
      "title": "Comment utiliser Axios avec React",
      "author": "Alpha",
      "body": "Introduction\nDe nombreux projets sur le web doivent s’interfacer avec une API REST à un certain stade de leur développement. Axios est un client HTTP léger basé sur le service $http dans Angular.js v1.x et est similaire à l’API native JavaScript Fetch.\n\nAxios est basé sur Promise, ce qui vous permet de profiter des avantages d’async de JavaScript et await pour un code asynchrone plus lisible.\n\nVous pouvez également intercepter et annuler des demandes, et il existe une protection intégrée côté client contre la falsification des demandes intersites.\n\nDans cet article, vous explorerez des exemples d’utilisation d’Axios pour accéder à la populaire API JSON Placeholder au sein d’une application React.\n\nConditions préalables\nPour suivre cet article, vous aurez besoin de ce qui suit :\n\nNode.js version 10.16.0 installé sur votre ordinateur. Pour l’installer sur macOS ou Ubuntu 18.04, suivez les étapes du tutoriel Comment installer Node.js et créer un environnement de développement local sur macOS ou la section **Installation à l’aide d’un PPA **du tutoriel Comment installer Node.js sur Ubuntu 18.04.\nUn nouveau projet React mis en place avec Créez l’application React en suivant le tutoriel Comment mettre en place un projet React avec Create React App.\nIl sera également utile d’avoir une compréhension de base de JavaScript, que vous pouvez trouver dans les séries Comment coder en JavaScript, ainsi qu’une connaissance de base de HTML et CSS.\nÉtape 1 — Ajouter Axios au projet\nDans cette section, vous ajouterez Axios au projet React digital-ocean-tutorial que vous avez créé en suivant le tutoriel Comment mettre en place un projet React avec Create React App.\n\nPour ajouter Axios au projet, ouvrez votre terminal et changez de répertoire dans votre projet :\n\ncd digital-ocean-tutorial\nExécutez ensuite cette commande pour installer Axios :\n\nnpm install axios\nEnsuite, vous devrez importer Axios dans le fichier dans lequel vous voulez l’utiliser.\n\nÉtape 2 — Faire une requête GET\nDans cet exemple, vous créez un nouveau composant et vous y importez Axios pour envoyer une demande GET.\n\nDans le dossier src de votre projet React, créez un nouveau composant nommé PersonList.js :\n\nnano src/PersonList.js\nAjoutez le code suivant au composant :\n\ndigital-ocean-tutorial/src/PersonList.js\nimport React from 'react';\n\nimport axios from 'axios';\n\nexport default class PersonList extends React.Component {\n  state = {\n    persons: []\n  }\n\n  componentDidMount() {\n    axios.get(`https://jsonplaceholder.typicode.com/users`)\n      .then(res => {\n        const persons = res.data;\n        this.setState({ persons });\n      })\n  }\n\n  render() {\n    return (\n      <ul>\n        { this.state.persons.map(person => <li>{person.name}</li>)}\n      </ul>\n    )\n  }\n}\nTout d’abord, vous importez React et Axios afin que les deux puissent être utilisés dans le composant. Ensuite, vous vous branchez sur le componentDidMount lifecycle hook et effectuez une demande GET.\n\nVous utilisez axios.get(url) avec une URL provenant d’un point final de l’API pour obtenir une promesse qui renvoie un objet de réponse. À l’intérieur de l’objet de réponse, il y a des données auxquelles on attribue la valeur person.\n\nVous pouvez également obtenir d’autres informations sur la demande, telles que le code de statut sous res.status ou plus d’informations à l’intérieur de res.request.\n\nÉtape 3 — Faire une demande POST\nDans cette étape, vous utiliserez Axios avec une autre méthode de requête HTTP appelée POST.\n\nSupprimer le code précédent dans PersonList et ajoutez les éléments suivants pour créer un formulaire qui permet à l’utilisateur d’entrer des données et ensuite POSTer le contenu à une API :\n\ndigital-ocean-tutorial/src/PersonList.js\n\nimport React from 'react';\nimport axios from 'axios';\n\nexport default class PersonList extends React.Component {\n  state = {\n    name: '',\n  }\n\n  handleChange = event => {\n    this.setState({ name: event.target.value });\n  }\n\n  handleSubmit = event => {\n    event.preventDefault();\n\n    const user = {\n      name: this.state.name\n    };\n\n    axios.post(`https://jsonplaceholder.typicode.com/users`, { user })\n      .then(res => {\n        console.log(res);\n        console.log(res.data);\n      })\n  }\n\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <label>\n            Person Name:\n            <input type=\"text\" name=\"name\" onChange={this.handleChange} />\n          </label>\n          <button type=\"submit\">Add</button>\n        </form>\n      </div>\n    )\n  }\n}\nDans la fonction handleSubmit, vous empêchez l’action par défaut du formulaire. Ensuite, vous mettez à jour l'état en entrée de l'utilisateur.\n\nUtiliser POST vous donne le même objet de réponse avec des informations que vous pouvez utiliser dans un appel then.\n\nPour compléter la demande POST, vous devez d’abord saisir l’entrée de l'utilisateur. Ensuite, vous ajoutez les données en même temps que la demande POST, qui vous donnera une réponse. Vous pouvez alors utiliser console.log pour la réponse, qui devrait montrer l’entrée user dans le formulaire.\n\nÉtape 4 — Faire une demande DELETE\nDans cet exemple, vous verrez comment supprimer des éléments d’une API en utilisant axios.delete et en passant une URL comme paramètre.\n\nChangez le code du formulaire de l’exemple POST pour supprimer un utilisateur au lieu d’en ajouter un nouveau :\n\ndigital-ocean-tutorial/src/PersonList.js\n\nimport React from 'react';\nimport axios from 'axios';\n\nexport default class PersonList extends React.Component {\n  state = {\n    id: '',\n  }\n\n  handleChange = event => {\n    this.setState({ id: event.target.value });\n  }\n\n  handleSubmit = event => {\n    event.preventDefault();\n\n    axios.delete(`https://jsonplaceholder.typicode.com/users/${this.state.id}`)\n      .then(res => {\n        console.log(res);\n        console.log(res.data);\n      })\n  }\n\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <label>\n            Person ID:\n            <input type=\"text\" name=\"id\" onChange={this.handleChange} />\n          </label>\n          <button type=\"submit\">Delete</button>\n        </form>\n      </div>\n    )\n  }\n}\nLà encore, l’objet res vous fournit des informations sur la demande. Vous pouvez ensuite réintroduire ces informations dans le fichier console.log après l’envoi du formulaire.\n\nÉtape 5 — Utiliser une instance de base dans Axios\nDans cet exemple, vous verrez comment vous pouvez mettre en place une instance de base dans laquelle vous pouvez définir une URL et tout autre élément de configuration.\n\nCréez un fichier séparé nommé api.js:\n\nnano src/api.js\nExportez une nouvelle instance axios avec ces valeurs par défaut :\n\ndigital-ocean-tutorial/src/api.js\nimport axios from 'axios';\n\nexport default axios.create({\n  baseURL: `http://jsonplaceholder.typicode.com/`\n});\nUne fois que l’instance par défaut est configurée, elle peut être utilisée dans le composant PersonList. Vous importez la nouvelle instance comme ceci :\n\ndigital-ocean-tutorial/src/PersonList.js\nimport React from 'react';\nimport axios from 'axios';\n\nimport API from '../api';\n\nexport default class PersonList extends React.Component {\n  handleSubmit = event => {\n    event.preventDefault();\n\n    API.delete(`users/${this.state.id}`)\n      .then(res => {\n        console.log(res);\n        console.log(res.data);\n      })\n  }\n}\nParce que http://jsonplaceholder.typicode.com/ est maintenant l’URL de base, vous n’avez plus besoin de taper l’URL complète chaque fois que vous voulez atteindre un point d’extrémité différent sur l’API.\n\nÉtape 6 — Utilisation de async et de await\nDans cet exemple, vous verrez comment vous pouvez utiliser async et await pour travailler avec des Promises.\n\nLe mot-clé await résout la Promise et renvoie la value. La value peut alors être attribuée à une variable.\n\nhandleSubmit = async event => {\n  event.preventDefault();\n\n  //\n  const response = await API.delete(`users/${this.state.id}`);\n\n  console.log(response);\n  console.log(response.data);\n};\nDans cet exemple de code, le .then() est remplacé. La Promise est résolue, et la value est stockée dans la variable de response.\n\nConclusion\nDans ce tutoriel, vous avez exploré plusieurs exemples sur la façon d’utiliser Axios dans une application React pour créer des requêtes HTTP et gérer les réponses.\n\nSi vous souhaitez en savoir plus sur le programme React, consultez la série Comment coder dans React.js ou consultez la page thématique de React pour plus d’exercices et de projets de programmation.",
      "date": "2022-03-01 23:08:41.663Z",
      "id": 5
    },
    {
      "title": "Data fetching with Axios in React made simple",
      "author": "Ibans",
      "body": "Introduction\nI started a project on react which I was new to some months ago and I got to a point I needed to fetch data from the server and I encountered some difficulties trying to fetch data from API. After some research and practice, I understood the concept and was able to fetch data in some other projects. My aim is to work you through on how to get started with axios and understand the necessary and basic part so as not to get stuck. At the end of this article, you will be able to get and post data to a server.\n\nPrerequisite\nThis project app is built with Material UI and React. A little knowledge of react will be helpful.\n\nWhat is Axios?\nAxios is a third party JavaScript library. Axios is a promise-based HTTP client easy to use for both browser and node.js.\n\nAxios is a Promised-based JavaScript library that is used to send HTTP requests. You can think of it as an alternative to JavaScript's native fetch() function.\n\nAxios is a modern, Promise-based HTTP client library. This means that Axios is used to send an HTTP request and handle their responses, all using JavaScript's promises. Axios supports both Node.js and JavaScript in the browser.\n\nFeatures of axios\nMake XMLHttpRequests from the browser\nMake http requests from node.js\nSupports the Promise API\nIntercept request and response\nTransform request and response data\nCancel requests\nAutomatic transforms for JSON data\nClient side support for protecting against XSRF\nWhere do we make http request?\nIn a class based component, requests are made in componentDidMount() lifecycle while in a functional component, requests are made in react lifecycle hooks i.e. useEffect.\nTo use Axios, axios needs to be installed in your project and imported in the component you want to fetch data in. To install axios using npm which I used, run \"npm install axios\" in your command prompt.\nAxios supports several request methods such as get, post, delete, put, etc.\nOur major focus will be on get and post method which is commonly used.\n\nFetching data in Axios using the Get method\nAxios offers a get method with at least one argument (url).\n\nFor example, let's see axios in action:\n\naxios.get(' ')\n.then(response => {\nconsole.log(response);\n});\n\nAlt Text\n\nThe above code is a simple API fetch using axios. Now, let's explain:\n\nAxios uses promises and get returns a promise 'then' which is a method which takes a function as the input and the function will get executed once the promise resolves, that is when the data from the server is there.\n\nAlt Text\n\nIn the code, we create an arrow function where we fetched data from the server and passed in into a variable called getRepo and called it in the lifecycle hooks. The second parameter [ ] empty array was passed so that the lifecycle hooks runs just once.\n\nAmong the response gotten back from the API, we only need to display the data, that is why we stored response.data inside myRepo container and then passed it to the state.\n\nAlt Text\n\nThe above image shows how the data fetched is being consumed or used in my component. Since the data returned is an array, we map through the array and then get the data we want to display and display it at the appropriate element.\n\nThe output will be:\n\nAlt Text\n\nAlt Text\n\nError Handling\nIf we have a network failure or if we make mistakes in the url, how do we handle this error?\n\nAlt Text\n\nTo handle this error, add a catch method which catches any error you get, after the then method.\n\n.catch ((error) {\nconsole.log(error)\n});\n\nOutput: Error handled properly\n\nAlt Text\n\nAnother way to get or fetch data from the server using the async/await function\n\nAlt Text\n\nTo use the async/await syntax, we need to wrap the axios.get() function call within an async function. We encase the method call with a try…catch block so that we can capture any errors. The variable “response” that receives the http data had to use await to ensure the asynchronous data was received before continuing.\n\nHow to Post data to the Server\nPost method takes url as the input but also needs a second argument which is the data you want to send. You can also pass a third argument to configure the request. You can listen to the request and print it in the console.\nThe below code is another way to post data using the async/await function.\n\nAlt Text\n\nAlt Text\n\nConclusion\nIn this article, you have learned how to make http requests to the server using axios (an alternative to fetch) and we have been able to get data from server and also post data to the server using both promise and async/await which is a great start. I am sure this article has made you axios journey a nice one. Feel free to practice what you have learnt and exploit other axios request methods.",
      "date": "2022-03-01 23:13:14.615Z",
      "id": 6
    },
    {
      "title": "react-router useHistory, useLocation and useParams",
      "author": "Hadjara",
      "body": "Introduction\nI expect that you have read my previous blog, so you already know what is the three route props. If you don't know about it, check my previous blog here. I discuss how we can pass the three route props, and I want to show you another easy way to access it without thinking to pass as props.\n\nuseHistory\nBasically, this hook gives you access to history objects and you have access to several functions to navigate your page. It's all about navigation. This is how you can use useHistory.",
      "date": "2022-03-01 23:44:38.294Z",
      "id": 7
    },
    {
      "title": "Conclusion",
      "author": "Binta",
      "body": "I hope this post could help you to understand the three main useful hooks from react-router. It is confusing in the beginning, but after I play around with it, everything makes sense and understandable. Enjoy playing react-router! post your comments to ask me questions.",
      "date": "2022-03-01 23:46:08.038Z",
      "id": 8
    },
    {
      "title": "Test Redirection",
      "author": "Alpha",
      "body": "Tutoriel sur comment gérer les redirections...............",
      "date": "2022-03-02 00:00:24.741Z",
      "id": 9
    }
  ]
}